package com.iessanvicente.rest.controllers;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.iessanvicente.rest.converter.ProductoDTOConverter;
import com.iessanvicente.rest.dto.CreateProductoDTO;
import com.iessanvicente.rest.models.CategoriaRepositorio;
import com.iessanvicente.rest.models.Producto;
import com.iessanvicente.rest.models.ProductoRepositorio;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class ProductoController {
	
	@Autowired
	private final ProductoDTOConverter dtoConverter;
	@Autowired
	private ProductoRepositorio productoRepositorio;
	@Autowired
	private CategoriaRepositorio categoriaRepositorio;

	/**
	 * Obtenemos todos los productos
	 * 
	 * @return
	 */
	@GetMapping("/producto")
	public ResponseEntity<?> obtenerTodos() {
		List<Producto> products = productoRepositorio.findAll();
		if(products.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(products.stream()
					.map(dtoConverter::convertToDto)
					.collect(Collectors.toList()));
		}
	}

	/**
	 * Obtenemos un producto en base a su ID
	 * 
	 * @param id
	 * @return Null si no encuentra el producto
	 */
	@GetMapping("/producto/{id}")
	public ResponseEntity<?> obtenerUno(@PathVariable Long id) {
		Producto p = productoRepositorio.findById(id).orElse(null);
		if(p == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(dtoConverter.convertToDto(p));
		}
	}

	/**
	 * Insertamos un nuevo producto
	 * 
	 * @param nuevo
	 * @return producto insertado
	 */
	@PostMapping("/producto")
	public ResponseEntity<?> nuevoProducto(@RequestBody CreateProductoDTO nuevo) {
		
		if(categoriaRepositorio.existsById(nuevo.getCategoriaId())) {
			
		} else {
			return ResponseEntity.notFound().build();
		}
		Producto p = new Producto(null, nuevo.getNombre(), nuevo.getPrecio(), nuevo.getCategoriaId())
		if(p == null) {
		} else {
			return ResponseEntity.status(HttpStatus.CREATED).body(p);
		}
	}

	/**
	 * 
	 * @param editar
	 * @param id
	 * @return
	 */
	@PutMapping("/producto/{id}")
	public ResponseEntity<?> editarProducto(@RequestBody Producto editar, @PathVariable Long id) {
		return productoRepositorio.findById(id).map(p -> {
			editar.setId(id);
			Producto saved = productoRepositorio.save(editar);
			if(saved != null) {
				return ResponseEntity.ok(saved);
			} else {
				return ResponseEntity.noContent().build();
			}
		}).orElseGet(() -> { return ResponseEntity.notFound().build(); });
	}

	/**
	 * Borra un producto del cat√°logo en base a su id
	 * @param id
	 * @return
	 */
	@DeleteMapping("/producto/{id}")
	public ResponseEntity<?> borrarProducto(@PathVariable Long id) {
		Producto p = productoRepositorio.findById(id).orElse(null);
		productoRepositorio.deleteById(id);
		return ResponseEntity.noContent().build();
	}

}
